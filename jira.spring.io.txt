Experiment with spring-boot version: in 1.3.7.RELEASE (spring data 2.4.4) decoratedClass is absent, but in 1.4.0.RELEASE (spring data 2.5.2) it is present

I'd like get clean JSON, when using Projection as DTO with RestController. However, in the best case we get JSON, most of which contain links to dekoratedClass.
{{{"name":"Dmitry","id":1,"decoratedClass":"ru.inkontext.domain.Person", "adress":{"id":1,"decoratedClass":"ru.inkontext.domain.Adress","city":"Surgut"}}}}

Tests below imaging matter of question.
h2. RestController
h3. Without Projection
mockMvc.perform(get("{color:#205081}/rest/persons/1{color}"))
.andExpect(jsonPath("*id*").value(*1*)
.andExpect(jsonPath("*decoratedClass*").*doesNotExist*());
h3. Projection created by Repository
mockMvc.perform(get("{color:#205081}/rest/persons/1/projected{color}"))
.andExpect(jsonPath("*id*").value(*1*)) .andExpect(jsonPath("*decoratedClass*").value("*java.util.HashMap*"));
h3. Projection created by Repository with Generic
mockMvc.perform(get("{color:#205081}/rest/persons/1/projectedClass{color}"))
.andExpect(jsonPath("*id*").value(*1*)) .andExpect(jsonPath("*decoratedClass*").value("*java.util.HashMap*"));
h3. Projection created by Projection Factory
mockMvc.perform(get("{color:#205081}/rest/persons/1/adressCity{color}"))
.andExpect(jsonPath("*id*").value(*1*)) .andExpect(jsonPath("*decoratedClass*").value("*ru.inkontext.domain.Person*"));
h2. Standard Sring Data REST API
h3. without Projection
mockMvc.perform(get("{color:#205081}/rest/api/persons/1{color}"))
.andExpect(jsonPath("*id*").*doesNotExist*())
.andExpect(jsonPath("*_links*").*exists*());
h3. with Projection
mockMvc.perform(get("{color:#205081}/rest/api/persons/1?projection=adressCity{color}"))
.andExpect(status().isOk())
.andExpect(jsonPath("*id*").value(*1*))
.andExpect(jsonPath("*_links*").*exists*());